version: '2'

volumes: {}

services:

  test-proxy:
    image: traefik:v2.4
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.grpc.address=:50051"
      - "--entryPoints.sftp.address=:${sftp.port}"
      - "--entryPoints.sftptunnel.address=:${sftptunnel.port}"
      - "--entryPoints.irods3.address=:${irods3.port}"
      - "--entryPoints.irods3pam.address=:${irods3pam.port}"
      - "--entryPoints.irods4.address=:${irods4.port}"
    ports:
      - 8000:80
      - 8443:443
      - 50051:50051
      - 28443:8080
      - ${sftp.port}:${sftp.port}
      - ${sftptunnel.port}:${sftptunnel.port}
      - ${irods3.port}:${irods3.port}
      - ${irods3pam.port}:${irods3pam.port}
      - ${irods4.port}:${irods4.port}
    restart: on-failure
    cpu_shares: 128
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"

  ##############################################################
  # Data containers
  ##############################################################

  sftp-relay:
    image: sftp-relay:develop
    restart: on-failure
    cpu_shares: 128
    mem_reservation: 128M
    volumes:
      - ${project.basedir}/../../scratch:${project.basedir}/../../scratch
      - ../:/go/src/github.com/agaveplatform/science-apis/agave-transfers/sftp-relay/target
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sftp-relay.rule=Host(`sftp-relay`)"
      - "traefik.http.routers.sftp-relay.entrypoints=grpc"
      - "traefik.http.services.sftp-relay.loadbalancer.server.scheme=h2c"
      - "traefik.http.services.sftp-relay.loadbalancer.server.port=50051"

  sftp:
    image: agaveplatform/sshd:latest
    restart: on-failure
    cpu_shares: 128
    mem_reservation: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.sftp.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.sftp.entrypoints=sftp"
      - "traefik.tcp.routers.sftp.service=sftp-svc"
      - "traefik.tcp.services.sftp-svc.loadbalancer.server.port=22"

  sftptunnel:
    image: agaveplatform/sshd:latest
    restart: on-failure
    cpu_shares: 128
    links:
      - sftphidden
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.sftptunnel.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.sftptunnel.entrypoints=sftptunnel"
      - "traefik.tcp.routers.sftptunnel.service=sftptunnel"
      - "traefik.tcp.services.sftptunnel-svc.loadbalancer.server.port=22"

  sftphidden:
    image: agaveplatform/sshd:latest
    restart: on-failure
    cpu_shares: 128
    mem_reservation: 128M

  irods4:
    image: agaveapi/irods:4.0.3
    command: changeit
    hostname: docker.example.com
    restart: on-failure
    mem_reservation: 1G
    cpus: 1.0
    cpu_shares: 1024
    environment:
      - 'DOCKER_HOSTNAME=docker.example.com'
      - 'IRODS_ZONE=iplant'
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.irods4.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.irods4.entrypoints=irods4"
      - "traefik.tcp.routers.irods4.service=irods4-svc"
      - "traefik.tcp.services.irods4-svc.loadbalancer.server.port=1247"

  irods3:
    image: agaveapi/irods:3.3.1
    hostname: docker.example.com
    restart: on-failure
    mem_reservation: 1G
    cpus: 1.0
    cpu_shares: 1024
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.irods3.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.irods3.entrypoints=irods3"
      - "traefik.tcp.routers.irods3.service=irods3-svc"
      - "traefik.tcp.services.irods3-svc.loadbalancer.server.port=1247"

  ##############################################################
  # Webhook containers
  ##############################################################

  requestbin:
    image: agaveplatform/requestbin:2.0.0
    hostname: requestbin
    restart: on-failure
    ports:
      - '5101:5000'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.requestbin.rule=Host(`requestbin`)"
      - "traefik.http.routers.requestbin.entrypoints=web"
      - "traefik.http.routers.requestbin.tls=false"
      - "traefik.http.routers.requestbin-secure.rule=Host(`requestbin`)"
      - "traefik.http.routers.requestbin-secure.entrypoints=websecure"
      - "traefik.http.routers.requestbin-secure.tls=true"


  httpbin:
    image: agaveplatform/httpbin:latest
    hostname: httpbin
    restart: on-failure
    ports:
      - '8200:8000'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.httpbin.rule=Host(`httpbin`)"
      - "traefik.http.routers.httpbin.entrypoints=web"
      - "traefik.http.routers.httpbin.tls=false"
      - "traefik.http.routers.httpbin-secure.rule=Host(`httpbin`)"
      - "traefik.http.routers.httpbin-secure.entrypoints=websecure"
      - "traefik.http.routers.httpbin-secure.tls=true"

  httpd:
    image: agaveplatform/apache-dev:latest
    hostname: docker.example.com
    restart: on-failure
    ports:
      - '10080:80'
      - '10443:443'
    volumes:
      - type: bind
        source: ./transfer
        target: /var/www/html/public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.httpd.rule=Host(`httpd`)"
      - "traefik.http.routers.httpd.entrypoints=web"
      - "traefik.http.routers.httpd.tls=false"
      - "traefik.http.routers.httpd.service=httpd"
      - "traefik.http.routers.httpd-secure.rule=Host(`httpd`)"
      - "traefik.http.routers.httpd-secure.entrypoints=websecure"
      - "traefik.http.routers.httpd-secure.service=httpd"
      - "traefik.http.routers.httpd-secure.tls=true"
      - "traefik.http.services.httpd.loadbalancer.server.port=80"


#  ftp:
#    image: agaveapi/pure-ftpd:latest
#    hostname: docker.example.com
#    privileged: true
#    ports:
#      - '10021:21'
#      - '30000-30010:30000-30010'

#  cephrgw:
#    image: ceph/daemon:latest-nautilus
#    command: demo
#    ports:
#      - "5000:5000"
#      - "8080:8080"
#      - "9000:9000"
#    environment:
#      CEPH_PUBLIC_NETWORK: 172.41.0.0/16
#      MON_IP: 172.41.0.10
#      RGW_REMOTE_CGI: 1
#      RGW_REMOTE_CGI_HOST: 172.41.0.10
#      CEPH_DEMO_UID: 1000
#      CEPH_DEMO_ACCESS_KEY: agaveuser
#      CEPH_DEMO_SECRET_KEY: password
#      CEPH_DEMO_BUCKET: agaveapitestdata
#    volumes:
#      - etcceph:/etc/ceph
#      - varlibceph:/var/lib/ceph
#    networks:
#      ceph_net:
#        ipv4_address: 172.41.0.10
#
#  minio:
#    image: minio/minio:RELEASE.2019-10-12T01-39-57Z
#    command: "server /data"
#    environment:
#      MINIO_ACCESS_KEY: agaveuser
#      MINIO_SECRET_KEY: password
#    ports:
#      - '9000:9000'
#
#  minio-init:
#    image: minio/mc:latest
#    environment:
#      MINIO_BUCKET: agaveapitestdata
#      MINIO_ACCESS_KEY: agaveuser
#      MINIO_SECRET_KEY: password
#    depends_on:
#      - minio
#    entrypoint:
#      - sh
#    command: |
#        -c "\
#          set +x && \
#          while ! nc -z minio 9000; do echo 'Wait minio to startup...' && sleep 0.1; done; \
#          sleep 5 && \
#          echo mc config host add myminio http://minio:9000 $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY && \
#          mc config host add myminio http://minio:9000 $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY && \
#          mc rm -r --force myminio/$$MINIO_BUCKET || true && \
#          mc mb myminio/$$MINIO_BUCKET \
#        "