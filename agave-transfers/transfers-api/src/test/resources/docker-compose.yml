version: '2'

volumes: {}
#  scratch:
#  etcceph:
#  varlibceph:

#networks:
#  ceph_net:
#    ipam:
#      driver: default
#      config:
#        - subnet: 172.41.0.0/16
#
#networks:
#  services:
#    external: true

services:
  traefik:
    image: traefik:v2.1
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.grpc.address=:50052"
#    networks:
#      - services
    ports:
      - 8000:80
      - 8443:443
      - 50052:50052
      - 28443:8080
    restart: on-failure
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"


#  sftp-relay:
#    image: agaveplatform/sftp-relay:develop
#    ports:
#      - 50051:50051
#      - 9092
#    restart: on-failure
#    volumes:
#      - ./transfer:/go/src/github.com/agaveplatform/science-apis/agave-transfers/sftp-relay/target/test-classes/transfer
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.sftp-relay.rule=Host(`sftp-relay`)"
#      - "traefik.http.routers.sftp-relay.entrypoints=grpc"
#      - "traefik.http.services.sftp-relay.loadbalancer.server.scheme=h2c"
#      - "traefik.http.services.sftp-relay.loadbalancer.server.port=50051"

  sftp:
    image: agaveplatform/sshd:latest
    command: "-p 10022"
    restart: on-failure
#    networks:
#      - services
    ports:
      - '10022:10022'

  sftptunnel:
   image: agaveplatform/sshd:latest
   command: "-p 10033"
   restart: on-failure
   links:
     - sftphidden
#   networks:
#     - services
   ports:
     - '10033:10033'

  sftphidden:
    image: agaveplatform/sshd:latest
    command: "-p 10044"
    restart: on-failure
#    networks:
#      - services
    ports:
      - '10044:10044'

#  irods4:
#    image: agaveapi/irods:4.0.3
#    command: changeit
#    hostname: docker.example.com
#    restart: on-failure
#    environment:
#      - 'DOCKER_HOSTNAME=docker.example.com'
#      - 'IRODS_ZONE=iplant'
#    ports:
#      - '1257:1247'
#      - '5442:5432'
#    deploy:
#      restart_policy:
#        condition: on-failure
#      resources:
#        limits:
#          memory: 2G
#
#  irods3:
#    image: agaveapi/irods:3.3.1
#    hostname: docker.example.com
#    restart: on-failure
#    ports:
#      - '10055:22'
#      - '1247:1247'
#      - '5432:5432'
#    deploy:
#      restart_policy:
#        condition: on-failure
#      resources:
#        limits:
#          memory: 2G
#
#  irods3-pam:
#    image: agaveapi/irods-pam:latest
#    hostname: docker.example.com
#    restart: on-failure
#    ports:
#      - '10066:22'
#      - '1248:1247'
#    deploy:
#      restart_policy:
#        condition: on-failure
#      resources:
#        limits:
#          memory: 2G

  requestbin:
    image: agaveplatform/requestbin:2.0.0
    hostname: requestbin
    restart: on-failure
#    networks:
#      - services
    ports:
      - '5101:5000'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.requestbin.rule=Host(`requestbin`)"
      - "traefik.http.routers.requestbin.entrypoints=web"
      - "traefik.http.routers.requestbin.tls=false"
      - "traefik.http.routers.requestbin-secure.rule=Host(`requestbin`)"
      - "traefik.http.routers.requestbin-secure.entrypoints=websecure"
      - "traefik.http.routers.requestbin-secure.tls=true"


  httpbin:
      image: agaveplatform/httpbin:latest
      hostname: httpbin
      restart: on-failure
#      networks:
#        - services
      ports:
        - '8200:8000'
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.httpbin.rule=Host(`httpbin`)"
        - "traefik.http.routers.httpbin.entrypoints=web"
        - "traefik.http.routers.httpbin.tls=false"
        - "traefik.http.routers.httpbin-secure.rule=Host(`httpbin`)"
        - "traefik.http.routers.httpbin-secure.entrypoints=websecure"
        - "traefik.http.routers.httpbin-secure.tls=true"

  httpd:
    image: agaveplatform/apache-dev:latest
    hostname: docker.example.com
    restart: on-failure
#    networks:
#      - services
    ports:
      - '10080:80'
      - '10443:443'
    volumes:
      - ./transfer:/var/www/html/public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.httpd.rule=Host(`httpd`)"
      - "traefik.http.routers.httpd.entrypoints=web"
      - "traefik.http.routers.httpd.tls=false"
      - "traefik.http.routers.httpd.service=httpd"
      - "traefik.http.routers.httpd-secure.rule=Host(`httpd`)"
      - "traefik.http.routers.httpd-secure.entrypoints=websecure"
      - "traefik.http.routers.httpd-secure.service=httpd"
      - "traefik.http.routers.httpd-secure.tls=true"
      - "traefik.http.services.httpd.loadbalancer.server.port=80"

#  ftp:
#    image: agaveapi/pure-ftpd:latest
#    hostname: docker.example.com
#    privileged: true
#    ports:
#      - '10021:21'
#      - '30000-30010:30000-30010'

#  cephrgw:
#    image: ceph/daemon:latest-nautilus
#    command: demo
#    ports:
#      - "5000:5000"
#      - "8080:8080"
#      - "9000:9000"
#    environment:
#      CEPH_PUBLIC_NETWORK: 172.41.0.0/16
#      MON_IP: 172.41.0.10
#      RGW_REMOTE_CGI: 1
#      RGW_REMOTE_CGI_HOST: 172.41.0.10
#      CEPH_DEMO_UID: 1000
#      CEPH_DEMO_ACCESS_KEY: agaveuser
#      CEPH_DEMO_SECRET_KEY: password
#      CEPH_DEMO_BUCKET: agaveapitestdata
#    volumes:
#      - etcceph:/etc/ceph
#      - varlibceph:/var/lib/ceph
#    networks:
#      ceph_net:
#        ipv4_address: 172.41.0.10
#
#  minio:
#    image: minio/minio:RELEASE.2019-10-12T01-39-57Z
#    command: "server /data"
#    environment:
#      MINIO_ACCESS_KEY: agaveuser
#      MINIO_SECRET_KEY: password
#    ports:
#      - '9000:9000'
#
#  minio-init:
#    image: minio/mc:latest
#    environment:
#      MINIO_BUCKET: agaveapitestdata
#      MINIO_ACCESS_KEY: agaveuser
#      MINIO_SECRET_KEY: password
#    depends_on:
#      - minio
#    entrypoint:
#      - sh
#    command: |
#        -c "\
#          set +x && \
#          while ! nc -z minio 9000; do echo 'Wait minio to startup...' && sleep 0.1; done; \
#          sleep 5 && \
#          echo mc config host add myminio http://minio:9000 $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY && \
#          mc config host add myminio http://minio:9000 $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY && \
#          mc rm -r --force myminio/$$MINIO_BUCKET || true && \
#          mc mb myminio/$$MINIO_BUCKET \
#        "