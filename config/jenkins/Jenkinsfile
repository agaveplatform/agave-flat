node ('master') {

    env.JAVA_HOME="${tool 'openjdk-9'}"
    env.MVN_HOME="${tool 'maven-3.6.3'}"
    env.PATH="${env.JAVA_HOME}/bin:${env.MVN_HOME}/bin:${env.PATH}"
	env.BUILD_IMAGE="agaveplatform/maven:3.6.3-proto"

	env.DOCKER_REGISTRY_URL = ''
	env.DOCKER_REGISTRY_ORG = 'agaveplatform'
//	env.BRANCH_NAME = 'develop'


	// Send a message indicating the start of the build. We record the thread and add it to the environment
	// so we thread all future messages
    def slackResponse = slackSend(color: "good", message: "Started Agave Science API build <${env.JOB_DISPLAY_URL}|${env.BUILD_DISPLAY_NAME}>")
    env.SLACK_THREAD_ID=slackResponse.threadId

    checkoutSource()
    build()
    unitTest()
    integrationTest()
	if (env.BRANCH_NAME == "develop" || env.BRANCH_NAME == "master") {
		buildAndPublishDockerImages()
		helmDeploy()
		helmTest()
		slackSend channel: slackResponse.threadId, color: "green", message: "CI/CD pipeline completed successfully."
	} else {
		slackSend channel: slackResponse.threadId, color: "green", message: "CI pipeline. Deployment skipped for release channel branches."
	}
}

def isPRMergeBuild() {
    return (env.BRANCH_NAME ==~ /^PR-\d+$/)
}

// Returs the short commit hash for the current checkout. We use this approach to avoid compatibility issues with the
// response from the GitSCM plugin
//
// @returns short 7 digit git commit hash
def shortCommitHash() {
	return sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
}

// Returns the full commit hash for the current checkout. We use this approach to avoid compatibility issues with the
// response from the GitSCM plugin
//
// @returns full git commit hash
def commitHash() {
	return sh(returnStdout: true, script: "git rev-parse HEAD").trim()
}

def checkoutSource () {
    stage('Checkout code') {
		try {
			context="continuous-integration/jenkins/"
			context += isPRMergeBuild()?"pr-merge/checkout":"branch/checkout"
			checkout
			//    setBuildStatus ("${context}", 'Checking out completed', 'SUCCESS')

			// set the commit hash and short hash for use in this build
			env.GIT_COMMIT=commitHash()
			env.GIT_SHORT_HASH=shortCommitHash()

			slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Checked out commit ${env.GIT_SHORT_HASH} from branch ${env.BRANCH_NAME}."
		} catch (err) {
			slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Source checkout failed."
			throw err
		}
	}
}

def build () {
    stage('Build Source') {
		//def MAVEN_CMD = "/usr/bin/docker run -i --rm -w $(pwd) -v ${env.WORKSPACE}:${env.WORKSPACE} -v ${env.HOME}/.m2:/root/.m2  -v /var/run/docker.sock:/var/run/docker.sock --net host agaveplatform/maven:3.6.3-proto mvn -Dstyle.color=never "
        def MAVEN_CMD = "mvn -Dstyle.color=never "
		try {
			sh "${MAVEN_CMD} -T 1.0C -P agave,dev clean compile "
			slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Source compilation complete."
		}
		catch (err) {
			slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Source compilation failed."
			throw err
		}
	}
}

def unitTest() {
	stage ('Unit Tests') {
		//def MAVEN_CMD = "/usr/bin/docker run -i --rm -w ${env.WORKSPACE} -v ${env.WORKSPACE}:${env.WORKSPACE} -v ${env.HOME}/.m2:/root/.m2  -v /var/run/docker.sock:/var/run/docker.sock --net=host agaveplatform/maven:3.6.3-proto mvn -Dstyle.color=never "
		def MAVEN_CMD = "mvn -Dstyle.color=never "

		try {
			sh "${MAVEN_CMD} -T 1.0C -P agave,dev install"

			// collect unit test output for report and archiving
			step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])

			slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Unit tests completed successfully. Test results available <${env.RUN_TESTS_DISPLAY_URL}|here>."
		}
		catch (err) {
			slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Unit tests failed. Test results available <${env.RUN_TESTS_DISPLAY_URL}|here>."
			throw err
		}
	}
}

def integrationTest() {
	stage ('Integration Tests') {
        withCredentials([usernamePassword(credentialsId: 'docker-hub-login', passwordVariable: 'DOCKER_REGISTRY_PASS', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
			//def MAVEN_CMD = "/usr/bin/docker run -i --rm -w ${env.WORKSPACE} -v ${env.WORKSPACE}:${env.WORKSPACE} -v ${env.HOME}/.m2:/root/.m2 -v ${env.HOME}/.docker:/root/.docker -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock --net=host agaveplatform/maven:3.6.3-proto mvn -Dstyle.color=never "
            def MAVEN_CMD = "mvn -Dstyle.color=never -P agave,integration-test,remote-data-tests verify -Dawait-maven-plugin.initialWait=15000 -Ddocker-compose-plugin.awaitDuration=10 -Dskip.post-integration.pause=false "

			try {
				// login to the docker registry
    			sh "docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASS} ${env.DOCKER_REGISTRY_URL}"

                stage ('Migrations') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl agave-migrations "
                }

                stage ('Protobuf Java Stubs') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :protos-java "
                }

                stage ('sftp-relay') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :sftp-relay "
                }

                stage ('Common Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :common-core "
                }

                stage ('Common API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :common-api "
                }

                stage ('Common Legacy API') {
                    clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :common-legacy-api "
                }

                stage ('Postits API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :postits-api "
                }

                stage ('Usage API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :usage-api "
                	clearCurrentContainers()
                }

                stage ('Tenants API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :tenants-api "
                }

                stage ('Logging API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :logging-api "
                }

                stage ('Notifications Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :notifications-core "
                }

                stage ('Notifications API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :notifications-api "
                }

                stage ('Profiles Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :profiles-core "
                }

                stage ('Profiles API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :profiles-api "
                }

                stage ('Metadata Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :metadata-core "
                }

                stage ('Metadata API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :metadata-api "
                }

                stage ('Systems Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :systems-core "
                }

                stage ('Systems API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :systems-api "
                	clearCurrentContainers()
                }

                stage ('Monitors Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :monitors-core "
                	clearCurrentContainers()
                }

                stage ('Monitors API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :monitors-api "
                	clearCurrentContainers()
                }

                stage ('Files Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :files-core "
                	clearCurrentContainers()
                }

                stage ('Files API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :files-api "
                }

                stage ('Apps Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :apps-core "
                }

                stage ('Apps API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :apps-api "
                }

                stage ('Jobs Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :jobs-core "
                }

                stage ('Jobs API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :jobs-api "
                }

                stage ('Tags Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :tags-core "
                }

                stage ('Tags API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :tags-api "
                }

                stage ('Realtime Core') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :realtime-core "
                }

                stage ('Realtime API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :realtime-api "
                }

                stage ('Stats API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :stats-api "
                }

                stage ('Uuids API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :uuids-api "
                }

                stage ('Apidocs API') {
                	clearCurrentContainers()
                	sh "${MAVEN_CMD} -pl :apidocs-api "
                }

    			step([$class: 'JUnitResultArchiver', testResults: '**/target/failsafe-reports/TEST-*.xml'])

    			slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Integration tests completed successfully. Test results available <${env.RUN_TESTS_DISPLAY_URL}|here>."

			}
			catch (err) {

				clearCurrentContainers()

				slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Integration tests failed. Test results available <${env.RUN_TESTS_DISPLAY_URL}|here>."

				throw err
			}

		}
	}
}

// Remove existing containers to avoid conflicts from failed builds
def clearCurrentContainers() {

    echo "Stopping existing docker containers"

	sh "docker ps -a --format '{{.Names}}' | grep -v traefik_traefik_  | xargs --no-run-if-empty docker stop"

	echo "Removing existing containers"

	sh "docker ps -a --format '{{.Names}}' | grep -v traefik_traefik_  | xargs --no-run-if-empty docker rm -f"
}

// Runs all local and 3rd party integration tests with code coverage anaalysis enabled.
def coverage() {
    stage ('Code Coverage Analysis') {
		withCredentials([file(credentialsId: 'maven-third-party-settings-file', variable: 'MAVEN_THIRD_PARTY_SETTINGS_FILE'),
						 usernamePassword(credentialsId: 'docker-hub-login', passwordVariable: 'DOCKER_REGISTRY_PASS', usernameVariable: 'DOCKER_REGISTRY_USER')]) {

            //def MAVEN_CMD = "docker run -i --rm -v ${env.MAVEN_THIRD_PARTY_SETTINGS_FILE}:/root/settings.xml -v ${env.WORKSPACE}:/sources -v ${env.HOME}/.m2:/root/.m2  -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock --net=host agaveplatform/maven:3.6.3-proto mvn --settings=/root/settings.xml"
            def MAVEN_CMD = "mvn -Dstyle.color=never --settings=${env.MAVEN_THIRD_PARTY_SETTINGS_FILE} "
			try {
			    // login to the docker registry
			    sh "docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASS} ${env.DOCKER_REGISTRY_URL}"

				sh "${MAVEN_CMD} -P agave,integration-test,remote-data-tests,coverage verify"
				step( [$class: 'JacocoPublisher', exclusionPattern: '**/*Exception*,**/*Configuration*,**/ApiApplication*,**/*Test*'])

				slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Coverage analysis completed successfully."
			}
			catch (err) {
				slackSend color: "red", message: "Failed running coverage analysis."
				throw err
			}
		}
	}
}

// handles clean build and push of docker images for the current branch and revision
def buildAndPublishDockerImages() {
    clearImages()
    buildImages()
    pushImages()
}

// clears out existing revision and branch images
def clearImages() {
    stage ("Clean Docker Images") {
    	try {
    	    // remove local branch images
			sh "./dockerbuild.sh -c -t localdev -v ${env.BRANCH_NAME}"
			// remove existing revision images
			sh "./dockerbuild.sh -c -t ${env.DOCKER_REGISTRY_ORG} -v ${env.GIT_SHORT_HASH}"
//			// remove existing branch images
//			sh "./dockerbuild.sh -c -t ${env.DOCKER_REGISTRY_ORG} -v ${env.BRANCH_NAME}"
			slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Docker image cleanup completed successfully."
		} catch (err) {
			slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Docker image cleanup failed."
			throw err
		}
	}
}

// builds new images tagged with the short revision commit hash and the branch name
def buildImages() {
    stage ("Build Docker Images") {
		// load docker credentials so we don't get bitten by the docker registry rate limiting policy
		withCredentials([usernamePassword(credentialsId: 'docker-hub-login', passwordVariable: 'DOCKER_REGISTRY_PASS', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
			try {
				// login to the docker registry
				sh "docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASS} ${env.DOCKER_REGISTRY_URL}"

				// build images from current revision
				sh "./dockerbuild.sh -b -t localdev -v ${env.BRANCH_NAME}"

				// tag local branch build with dev branch repo and name
                // sh "./dockerbuild.sh -r -s localdev -w ${env.BRANCH_NAME} -t ${env.DOCKER_REGISTRY_ORG} -v ${env.BRANCH_NAME}-dev"

				// tag local branch build with revision images
				sh "./dockerbuild.sh -r -s localdev -w ${env.BRANCH_NAME} -t ${env.DOCKER_REGISTRY_ORG} -v ${env.GIT_SHORT_HASH}"

				slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Docker build completed successfully. Log available <${env.BUILD_URL}|here>."
			} catch (err) {
				slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Docker build failed."
				throw err
			}
		}
	}
}

// push images to the configured docker registry
def pushImages() {
	stage('Push Docker Images') {
		withCredentials([usernamePassword(credentialsId: 'docker-hub-login', passwordVariable: 'DOCKER_REGISTRY_PASS', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
			try {
				// login to the docker registry
				sh "docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASS} ${env.DOCKER_REGISTRY_URL}"
				// push revision images to repo
				sh "./dockerbuild.sh -p -t ${env.DOCKER_REGISTRY_ORG} -v ${env.GIT_SHORT_HASH}"
				// push branch images to repo
				// sh "./dockerbuild.sh -p -t ${env.DOCKER_REGISTRY_ORG} -v ${env.BRANCH_NAME}-dev"

				slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Docker image push to ${env.DOCKER_REGISTRY_URL} completed successfully."
			} catch (err) {
				slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Docker image push failed."
				throw err
			}
		}
	}
}

def helmDeploy() {
	stage('Deploy Helm Chart') {
		withCredentials([file(credentialsId: 'agave-kubectl-config', variable: 'KUBECONFIG_FILE'),
		usernamePassword(credentialsId: 'sendgrid-login-k8s.agaveplatform.org', passwordVariable: 'SMTP_PASSWORD', usernameVariable: 'SMTP_USERNAME')]) {
			try {
				def branchSubdomain = env.BRANCH_NAME.replaceAll('\\.','-')

				sh("helm repo add agave https://helm.agaveplatform.org")

				sh("helm repo update")

				sh("rm -rf helm")

				sh("mkdir -p helm")

				sh("helm fetch agave/core-services --destination ./helm --untar")

				sh("helm package ./helm/core-services --destination ./helm --dependency-update --app-version=${env.GIT_SHORT_HASH} --namespace=${branchSubdomain}")

				def packagedChartVersion = sh(returnStdout: true, script: "/bin/bash -c 'helm show chart helm/core-services | ${env.HOME}/.local/bin/yq -r .version'").trim()

				sh("helm --kubeconfig \"${KUBECONFIG_FILE}\" upgrade --install --namespace=${branchSubdomain} core-services helm/core-services-${packagedChartVersion}.tgz  --create-namespace  --set global.tenantBaseUrl=${branchSubdomain}.dev.k8s.agaveplatform.org,global.baseUrl=core-${branchSubdomain}.dev.k8s.agaveplatform.org,global.agaveVersion=${env.GIT_SHORT_HASH},email.smtp.host=smtp.sendgrid.net,email.smtp.port=587,email.smtp.username=${SMTP_USERNAME},email.smtp.password=${SMTP_PASSWORD}")

				slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Helm deployment completed successfully. Core services will be available at <https://core-${branchSubdomain}.dev.k8s.agaveplatform.org|https://${branchSubdomain}.dev.k8s.agaveplatform.org>."
			} catch (err) {
				slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Helm deployment failed."
				throw err
			}
// 			finally {
// 			  sh ("rm -rf ./helm")
// 			}
      	}
  	}
}

def helmTest() {
	stage('Helm Chart Tests') {
		withCredentials([file(credentialsId: 'agave-kubectl-config', variable: 'KUBECONFIG_FILE')]) {
			def branchSubdomain = env.BRANCH_NAME.replaceAll('\\.','-')

			timeout(10) {
                waitUntil {
					def pendingPods = sh(returnStdout: true, script: "/bin/bash -c 'kubectl --kubeconfig=${KUBECONFIG_FILE} -n ${branchSubdomain} get pods -o json | jq -r .items[].status.phase | grep -v Running | grep -v Succeeded | grep -v Completed | sort | uniq '").trim()
					echo pendingPods
					return (pendingPods == null || pendingPods == '')
                }
			}

            try {
				// now run tests
				sh("helm --kubeconfig \"${KUBECONFIG_FILE}\" test core-services --namespace=${branchSubdomain} --logs --timeout=30m0s")

				slackSend channel: env.SLACK_THREAD_ID, color: "green", message: "Helm tests completed successfully. Deployment is ready for use at <https://core-${branchSubdomain}.dev.k8s.agaveplatform.org|https://core-${branchSubdomain}.dev.k8s.agaveplatform.org>."
			} catch (err) {
				slackSend channel: env.SLACK_THREAD_ID, color: "danger", message: "Helm tests failed."
				throw err
			}
		}
	}
}