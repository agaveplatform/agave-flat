<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.agaveplatform</groupId>
		<artifactId>systems</artifactId>
		<version>2.2.27</version>
	</parent>
	<artifactId>systems-core</artifactId>
	<name>Agave Platform Systems Service Core</name>
	<description>Core classes for Agave Systems service</description>
	<packaging>jar</packaging>

	<properties>
		<force.check.update>false</force.check.update>
		<main.basedir>${project.basedir}/../../</main.basedir>
	</properties>

	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<plugins>
			<!-- Default integration testing for all submodules. Note that integration testing
				requires persistence, queueing, etc. These are provided as containers and
				managed by Docker Compose through the managed docker-compose-maven-plugin.
				We omit the inclusion of those plugins here due to this being a parent folder
				and not containing any tests that require orchestration. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration.tests}</skipTests>
							<properties>
								<property>
									<name>parallel</name>
									<value>methods</value>
								</property>
								<property>
									<name>dataproviderthreadcount</name>
									<value>2</value>
								</property>
							</properties>
							<excludedGroups>broken,notReady,irods4,s3,irods3</excludedGroups>
							<systemPropertyVariables>
								<log4j.configuration>file:${basedir}/src/test/resources/log4j.properties
								</log4j.configuration>
							</systemPropertyVariables>
						</configuration>
					</execution>

					<execution>
						<id>${project.artifactId}-integration-irods3-sanitization</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration.irods3.tests}</skipTests>
							<groups>irods3.path.sanitization</groups>
							<excludedGroups>broken,notReady</excludedGroups>
							<systemPropertyVariables>
								<log4j.configuration>file:${basedir}/src/test/resources/log4j.properties
								</log4j.configuration>
							</systemPropertyVariables>
						</configuration>
					</execution>
					<execution>
						<id>${project.artifactId}-integration-irods3</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration.irods3.tests}</skipTests>
							<properties>
								<property>
									<name>parallel</name>
									<value>methods</value>
								</property>
							</properties>
							<groups>irods3</groups>
							<excludedGroups>broken,notReady,irods3.path.sanitization</excludedGroups>
							<systemPropertyVariables>
								<log4j.configuration>file:${basedir}/src/test/resources/log4j.properties
								</log4j.configuration>
							</systemPropertyVariables>
						</configuration>
					</execution>

					<execution>
						<id>${project.artifactId}-integration-irods4-sanitization</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration.irods4.tests}</skipTests>
							<groups>irods4.path.sanitization</groups>
							<excludedGroups>broken,notReady</excludedGroups>
							<systemPropertyVariables>
								<log4j.configuration>file:${basedir}/src/test/resources/log4j.properties
								</log4j.configuration>
							</systemPropertyVariables>
						</configuration>
					</execution>
					<execution>
						<id>${project.artifactId}-integration-irods4</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration.irods4.tests}</skipTests>
							<properties>
								<property>
									<name>parallel</name>
									<value>methods</value>
								</property>
							</properties>
							<groups>irods4</groups>
							<excludedGroups>broken,notReady,irods4.path.sanitization</excludedGroups>
							<systemPropertyVariables>
								<log4j.configuration>file:${basedir}/src/test/resources/log4j.properties
								</log4j.configuration>
							</systemPropertyVariables>
						</configuration>
					</execution>


<!--					<execution>-->
<!--						<phase>integration-test</phase>-->
<!--						<goals>-->
<!--							<goal>integration-test</goal>-->
<!--						</goals>-->
<!--						<configuration>-->
<!--							<skipTests>${skip.integration.tests}</skipTests>-->
<!--							<properties>-->
<!--								<property>-->
<!--									<name>parallel</name>-->
<!--									<value>methods</value>-->
<!--								</property>-->
<!--								<property>-->
<!--									<name>dataproviderthreadcount</name>-->
<!--									<value>2</value>-->
<!--								</property>-->
<!--							</properties>-->
<!--							<groups>irods4.operations,irods4.file.sanitization,irods4.file.resolution</groups>-->
<!--							<excludedGroups>broken,notReady</excludedGroups>-->
<!--							<systemPropertyVariables>-->
<!--								<log4j.configuration>file:${basedir}/src/test/resources/log4j.properties-->
<!--								</log4j.configuration>-->
<!--							</systemPropertyVariables>-->
<!--						</configuration>-->
<!--					</execution>-->
<!--					<execution>-->
<!--						<phase>integration-test</phase>-->
<!--						<goals>-->
<!--							<goal>integration-test</goal>-->
<!--						</goals>-->
<!--						<configuration>-->
<!--							<skipTests>${skip.integration.tests}</skipTests>-->
<!--							<properties>-->
<!--								<property>-->
<!--									<name>parallel</name>-->
<!--									<value>methods</value>-->
<!--								</property>-->
<!--								<property>-->
<!--									<name>dataproviderthreadcount</name>-->
<!--									<value>2</value>-->
<!--								</property>-->
<!--							</properties>-->
<!--							<groups>irods4</groups>-->
<!--							<excludedGroups>broken,notReady,s3.operations,s3.file.sanitization,s3.file.resolution</excludedGroups>-->
<!--							<systemPropertyVariables>-->
<!--								<log4j.configuration>file:${basedir}/src/test/resources/log4j.properties-->
<!--								</log4j.configuration>-->
<!--							</systemPropertyVariables>-->
<!--						</configuration>-->
<!--					</execution>-->
					<!-- S3 tests  are disabled by default as they require a valid set of aws keys
					     and bucket to test against. This is not expensive, and can easily fit in the free
					     tier, but is not something we configure out of the box, so we leave it a
					     flagged integration test until we find a suitable s3 compatibile container to
					     test against. -->
					<execution>
						<id>${project.artifactId}-integration-s3</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration.s3.tests}</skipTests>
							<properties>
								<property>
									<name>parallel</name>
									<value>methods</value>
								</property>
								<property>
									<name>dataproviderthreadcount</name>
									<value>2</value>
								</property>
							</properties>
							<groups>s3</groups>
							<excludedGroups>broken,notReady</excludedGroups>
							<systemPropertyVariables>
								<log4j.configuration>file:${basedir}/src/test/resources/log4j.properties
								</log4j.configuration>
							</systemPropertyVariables>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Starts and stops integration test containers with Docker Compose -->
			<plugin>
				<groupId>com.dkanejs.maven.plugins</groupId>
				<artifactId>docker-compose-maven-plugin</artifactId>
			</plugin>

			<!-- Performs a wait and rediness check for integration test container startup -->
			<plugin>
				<groupId>org.agaveplatform.ops</groupId>
				<artifactId>await-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>airavata</groupId>
			<artifactId>gsissh</artifactId>
			<version>${gsissh.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>myproxy</artifactId>
					<groupId>org.jglobus</groupId>
				</exclusion>
				<exclusion>
					<artifactId>gss</artifactId>
					<groupId>org.jglobus</groupId>
				</exclusion>
				<exclusion>
					<groupId>org.bouncycastle</groupId>
					<artifactId>bcprov-jdk16</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
		   <groupId>com.sshtools</groupId>
		   <artifactId>j2ssh-maverick</artifactId>
		   <version>1.5.5</version>
		   <exclusions>
		   	<exclusion>
				<groupId>org.bouncycastle</groupId>
				<artifactId>bcprov-jdk15on</artifactId>
			</exclusion>
		   </exclusions>
		</dependency>

		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcpkix-jdk15on</artifactId>
			<version>1.50</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-exec</artifactId>
			<version>${commons-exec.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.jclouds</groupId>
			<artifactId>jclouds-allblobstore</artifactId>
			<version>${jclouds.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.jclouds.driver</groupId>
			<artifactId>jclouds-slf4j</artifactId>
			<version>${jclouds.version}</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.irods.jargon</groupId>
			<artifactId>jargon-core</artifactId>
			<version>${jargon-core.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-log4j12</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
				<exclusion>
					<artifactId>cog-jglobus</artifactId>
					<groupId>org.globus.jglobus</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<version>${plexus-utils.version}</version>
		</dependency>

		<dependency> 
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>${commons-fileupload.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>${httpmime.version}</version>
		</dependency>

		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>${javax.el.version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>javax.el</artifactId>
			<version>${javax.el.version}</version>
		</dependency>
	</dependencies>

</project>
